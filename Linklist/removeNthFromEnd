提交：
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {
    int size=0;
    int i;
    struct ListNode* yummyhead=(struct ListNode*)malloc(sizeof(struct ListNode));
    yummyhead->next=head;
    struct ListNode* q=head;
    struct ListNode* p=yummyhead;
    while(q){
        size++;
        q=q->next;
    }
    if(size==n){
        return head->next;
    }
    for(i=0;i<size-n;i++){
        p=p->next;
    }
    q=p->next;
    p->next=q->next;
    free(q);
    return head;
}
题解一的计算链表长度方法。

题解二：栈
利用栈处理倒数问题，用C++更好
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* dummy = new ListNode(0, head);
        stack<ListNode*> stk;
        ListNode* cur = dummy;
        while (cur) {
            stk.push(cur);
            cur = cur->next;
        }
        for (int i = 0; i < n; ++i) {
            stk.pop();
        }
        ListNode* prev = stk.top();
        prev->next = prev->next->next;
        ListNode* ans = dummy->next;
        delete dummy;
        return ans;
    }
};

题解三：双指针
利用双指针提前设置间距，也是很巧妙的
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* dummy = new ListNode(0, head);
        ListNode* first = head;
        ListNode* second = dummy;
        for (int i = 0; i < n; ++i) {
            first = first->next;
        }
        while (first) {
            first = first->next;
            second = second->next;
        }
        second->next = second->next->next;
        ListNode* ans = dummy->next;
        delete dummy;
        return ans;
    }
};
